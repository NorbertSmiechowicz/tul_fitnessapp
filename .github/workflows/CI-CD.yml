name: Docker Compose CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build-and-test:

    runs-on: ubuntu-latest

    steps:
    # Checkout repository
    - uses: actions/checkout@v4

    # Set up Docker
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    # Build and start services using Docker Compose
    - name: Build and Start Services
      run: |
        docker-compose up --build -d

    # Wait for services to be ready (basic health check or delay)
    - name: Wait for services to start
      run: sleep 30

    # Python module_ai test
    - name: Run Python Tests
      run: |
        docker exec $(docker ps -q -f name=module_core) pytest --maxfail=1 --disable-warnings

    # Static Analysis for Python (e.g., Flake8, SonarQube)
    - name: Run Flake8 for Python Linting
      run: |
        docker exec $(docker ps -q -f name=module_core) flake8 module_ai/

    - name: SonarQube Analysis (Python)
      run: |
        docker exec $(docker ps -q -f name=module_core) sonar-scanner \
          -Dsonar.projectKey=python-module-ai \
          -Dsonar.host.url=${{ secrets.SONARQUBE_HOST }} \
          -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}

    # .NET backend testing
    - name: Restore .NET Dependencies
      run: |
        docker exec $(docker ps -q -f name=module_core) dotnet restore

    - name: Run .NET Tests
      run: |
        docker exec $(docker ps -q -f name=module_core) dotnet test --no-build --verbosity normal

    # Static Analysis for .NET (SonarQube)
    - name: SonarQube Analysis (.NET)
      run: |
        docker exec $(docker ps -q -f name=module_core) dotnet-sonarscanner begin \
          /k:"dotnet-backend" \
          /d:sonar.host.url="${{ secrets.SONARQUBE_HOST }}" \
          /d:sonar.login="${{ secrets.SONARQUBE_TOKEN }}"
        docker exec $(docker ps -q -f name=module_core) dotnet build
        docker exec $(docker ps -q -f name=module_core) dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONARQUBE_TOKEN }}"

    # Push Docker Image to Registry
    - name: Log in to Docker Hub
      run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Tag Docker Image
      run: |
        docker tag my-image-name:$(date +%s) ${{ secrets.DOCKER_USERNAME }}/my-image-name:latest

    - name: Push Docker Image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/my-image-name:latest

    # Verify Application Metrics and Logging
    - name: Verify Metrics Endpoints
      run: |
        curl -f http://localhost:8080/actuator/metrics || echo "Metrics endpoint not available"

    - name: Verify Logging
      run: |
        curl -f http://localhost:8080/logging || echo "Logging endpoint not available"

    # Tear Down Services
    - name: Stop and Remove Services
      run: docker-compose down
