name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    # Checkout repository
    - uses: actions/checkout@v4

    # Building Docker image from a Dockerfile
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)

    # Python module_ai test
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python Dependencies
      run: pip install -r requirements.txt
      
    - name: Run PyTest
      run: pytest --maxfail=1 --disable-warnings

    # Static Analysis for Python (e.g., Flake8, SonarQube)
    - name: Run Flake8 for Python Linting
      run: pip install flake8 && flake8 module_ai/

    - name: SonarQube Analysis (Python)
      run: |
        sonar-scanner \
          -Dsonar.projectKey=python-module-ai \
          -Dsonar.host.url=${{ secrets.SONARQUBE_HOST }} \
          -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}

    # .NET backend testing
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0'

    - name: Restore Dependencies
      run: dotnet restore

    - name: Run Tests
      run: dotnet test --no-build --verbosity normal

    # Static Analysis for .NET (SonarQube)
    - name: SonarQube Analysis (.NET)
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet-sonarscanner begin \
          /k:"dotnet-backend" \
          /d:sonar.host.url="${{ secrets.SONARQUBE_HOST }}" \
          /d:sonar.login="${{ secrets.SONARQUBE_TOKEN }}"
        dotnet build
        dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONARQUBE_TOKEN }}"

    # Push Docker Image to Registry
    - name: Log in to Docker Hub
      run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Tag Docker Image
      run: docker tag my-image-name:$(date +%s) ${{ secrets.DOCKER_USERNAME }}/my-image-name:latest

    - name: Push Docker Image to Docker Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/my-image-name:latest

    # Verify Application Metrics and Logging
    - name: Verify Metrics Endpoints
      run: curl -f http://localhost:8080/actuator/metrics || echo "Metrics endpoint not available"

    - name: Verify Logging
      run: curl -f http://localhost:8080/logging || echo "Logging endpoint not available"
